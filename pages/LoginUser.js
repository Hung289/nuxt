import React, { useState, useEffect } from "react";
import { useRouter } from "next/router";
import Link from "next/link";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { Formik, useFormik, Form, Field, useFormikContex } from "formik";
import * as Yup from "yup";
import { Col, Row, Button } from "react-bootstrap";
import * as TypeUserConstant from "../Constant/TypeUserConstant";
import LayoutClient from "../layouts/LayoutClient";
import * as AuthService from "../Lib/AuthService";
import * as Constant from "../Constant/GlobalConstant";
import { RequestSimple } from "../Common/UtilRequest";
import ReactLoading from "react-loading";
import { connect } from "react-redux";
import Head from "next/head";
import * as AuthAction from "../redux/actions/AuthAction";

const LoginUser = (props) => {
  const { backUrl, onUserLogin, user } = props;
  const [isAuthLoading, setAuthLoading] = useState(false);
  const history = useRouter();

  const loginUser = async (email, password) => {
    try {
      setAuthLoading(true);
      RequestSimple(`${Constant.PathServer}/api/Auth/Login`, "post", {
        UserName: email,
        PassWord: password,
      }).then((rs) => {
        setAuthLoading(false);
        if (rs.Status) {
          AuthService.LoginUser(rs.Data);
          onUserLogin(rs.Data);
          toast.success("Đăng nhập thành công!");

          if (backUrl != null) {
            history.push(`/${backUrl}`);
          } else if (token.TypeUser === TypeUserConstant.NguoiDangKy) {
            history.push("/HsHienGhep");
          } else if (token.TypeUser === TypeUserConstant.CanBoQuanLy) {
            history.push("/Admin");
          }
        } else {
          toast.error(rs.MessageError);
        }
      });
    } catch (error) {
      setAuthLoading(false);
      toast.error(
        (error.response &&
          error.response.data &&
          error.response.data.message) ||
          error.message
      );
    }
  };

  const formik = useFormik({
    initialValues: {
      email: "",
      password: "",
    },
    validationSchema: Yup.object({
      email: Yup.string().required("Vui lòng nhập tài khoản"),
      password: Yup.string()
        .min(5, "Vui lòng nhập nhiều hơn 5 ký tự")
        .max(30, "Vui lòng nhập ít hơn 30 ký tự")
        .required("Vui lòng nhập mật khẩu"),
    }),
    onSubmit: (values) => {
      loginUser(values.email, values.password);
    },
  });

  return (
    <>
      <>
        <Head>
          <title>Cổng đăng ký hiến và ghép mô tạng - Bệnh viện Chợ Rẫy</title>
          <meta name="description" content="Generated by create next app" />
          <meta
            name="title"
            content="Cổng đăng ký hiến và ghép tạng - Bệnh viện Chợ Rẫy"
          />
          <meta name="description" content="Hinet JSC" />
          <link rel="icon" href="/favicon.ico" />
          <link href="/libs/fontawesome/css/all.css" rel="stylesheet"></link>
        </Head>
      </>

      {isAuthLoading ? (
        <div className="coverLoader">
          <ReactLoading
            className="loaderItem"
            type="bars"
            color="#2980b9"
            height="100px"
            width="100px"
          />
        </div>
      ) : null}
      <Row className="boxlogin ">
        <Col className=" " md={12}>
          <div>
            <div className="Title-Login-Register center">Đăng Nhập</div>
          </div>
          <Row className=" mgt15">
            <form onSubmit={formik.handleSubmit} className="col-md-12">
              <div className="mb-3">
                <label htmlFor="email"> Tên đăng nhập</label>
                <div className="input-group">
                  <input
                    className="form-control"
                    {...formik.getFieldProps("email")}
                  />
                  <div className="input-group-append">
                    <div className="input-group-text">
                      <span className="fas fa-user" />
                    </div>
                  </div>
                </div>
                {formik.touched.email && formik.errors.email ? (
                  <div className="red">{formik.errors.email}</div>
                ) : null}
              </div>
              <div className="mb-3">
                <label htmlFor="password"> Mật khẩu</label>
                <div className="input-group">
                  <input
                    type="password"
                    className="form-control"
                    autoComplete="off"
                    {...formik.getFieldProps("password")}
                  />
                  <div className="input-group-append">
                    <div className="input-group-text">
                      <span className="fas fa-lock" />
                    </div>
                  </div>
                </div>
                {formik.touched.password && formik.errors.password ? (
                  <div className="red">{formik.errors.password}</div>
                ) : null}
              </div>
              <div className="font-size15 right">
                <Link href="/QuenMatKhau">
                  <a>Quên mật khẩu?</a>
                </Link>
              </div>
              <div className="mb-3 center mgt15">
                <Button
                  className="btn-lg font-size22"
                  type="submit"
                  // isLoading={isAuthLoading}
                >
                  Đăng nhập
                </Button>
              </div>
            </form>
            <div className="col-sm-12 mgt15">
              <Row>
                <Col md={12} className="font-size15 center">
                  <Link href="/dangky">
                    <a>Đăng ký tài khoản</a>
                  </Link>
                </Col>
              </Row>
            </div>
          </Row>
        </Col>
      </Row>
    </>
  );
};

export async function getServerSideProps({ query }) {
  let urlBack = query.backurl;
  if (!urlBack) {
    urlBack = "";
  }
  return {
    props: {
      backUrl: urlBack,
    },
  };
}

LoginUser.getLayout = function getLayout(page) {
  return <LayoutClient>{page}</LayoutClient>;
};
const mapStateToProps = (state) => ({
  user: state.auth.user,
});

const mapDispatchToProps = (dispatch) => ({
  onUserLogin: (userData) =>
    dispatch({
      type: AuthAction.AUTH_LOADUSER,
      Data: userData,
    }),
});

export default connect(mapStateToProps, mapDispatchToProps)(LoginUser);
